{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { BehaviorSubject, catchError, map, shareReplay, tap, throwError } from 'rxjs';\nimport * as moment from \"moment\";\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/services/error.service\";\nimport * as i3 from \"@auth0/angular-jwt\";\nimport * as i4 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/ld+json'\n  })\n};\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, error, jwtHelper, router) {\n      this.http = http;\n      this.error = error;\n      this.jwtHelper = jwtHelper;\n      this.router = router;\n      this.apiUrl = environment.API_PLATFORM_URL;\n      this.JWTLoginCheck = environment.LOGIN_URL;\n      this.authenticatedUser = new BehaviorSubject(null);\n      this.user = this.authenticatedUser.asObservable();\n      this.isLoggedIn = this.user.pipe(map(user => !!user));\n      this.isLoggedOut = this.isLoggedIn.pipe(map(loggedIn => !loggedIn));\n      const tokenUser = this.getToken();\n      const expirationT = this.getExpiration();\n\n      if (expirationT === false) {\n        this.authenticatedUser.next(JSON.parse(tokenUser));\n      } else {\n        this.logout();\n        this.authenticatedUser.next(null);\n      }\n    }\n\n    register(user) {\n      return this.http.post(this.apiUrl + 'users', {\n        email: user.email,\n        password: user.password,\n        firstname: user.firstname,\n        lastname: user.lastname\n      }, httpOptions).pipe(catchError(this.error.handleError), shareReplay());\n    }\n\n    checkLoginUser(user) {\n      return this.http.post(this.JWTLoginCheck, {\n        email: user.email,\n        password: user.password\n      }, httpOptions).pipe(tap(res => {\n        this.setSession(res);\n        this.authenticatedUser.next(user);\n      }), catchError(err => {\n        console.log('caught mapping error and rethrowing', err);\n        return throwError(() => err);\n      }), shareReplay());\n    }\n\n    updateUserAccount(user) {\n      if (this.getExpiration() === false) {\n        const idUser = this.decodeToken().id;\n        return this.http.put(this.apiUrl + 'users/' + `${idUser}`, user, httpOptions).pipe(catchError(this.error.handleError));\n      } else {\n        throw new Error('La session a expirer. Veuillez vous reconnecter.');\n      }\n    }\n\n    deleteUserAccount() {\n      if (this.getExpiration() === false) {\n        const idUser = this.decodeToken().id;\n        return this.http.delete(this.apiUrl + 'users/' + `${idUser}`, httpOptions).pipe(tap(() => {\n          this.logout();\n        }), catchError(this.error.handleError), shareReplay());\n      } else {\n        throw new Error('La session a expirer. Veuillez vous reconnecter.');\n      }\n    }\n\n    getUserInfos(id) {\n      return this.http.get('http://localhost/api/users/' + `${id}`, httpOptions).pipe(map(x => console.log(x)));\n    }\n\n    getUserFavoris(id) {\n      return this.http.get('http://localhost/api/users/' + `${id}`, httpOptions).pipe(map(({\n        favorites\n      }) => favorites));\n    }\n\n    getUserInventory(id) {\n      return this.http.get('http://localhost/api/users/' + `${id}`, httpOptions).pipe(map(({\n        inventories\n      }) => inventories));\n    }\n\n    setSession(authResult) {\n      const expiresAt = moment().add(authResult.expiresIn, 'second');\n      localStorage.setItem('id_token', JSON.stringify(authResult.token));\n      localStorage.setItem(\"expires_at\", JSON.stringify(expiresAt.valueOf()));\n    }\n\n    getToken() {\n      return localStorage.getItem('id_token');\n    }\n\n    logout() {\n      this.authenticatedUser.next(null);\n      localStorage.removeItem(\"id_token\");\n      localStorage.removeItem(\"expires_at\");\n      this.router.navigateByUrl(\"/\");\n    }\n\n    decodeToken() {\n      return this.jwtHelper.decodeToken(localStorage.getItem('id_token'));\n    }\n\n    getExpiration() {\n      return this.jwtHelper.isTokenExpired(this.getToken());\n    }\n\n    isAuthenticated() {\n      const token = this.getToken(); // Check whether the token is expired and return\n      // true or false\n\n      return !this.jwtHelper.isTokenExpired(token);\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorService), i0.ɵɵinject(i3.JwtHelperService), i0.ɵɵinject(i4.Router));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}